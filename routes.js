// Generated by CoffeeScript 1.3.3
(function() {

  module.exports = function(app, vimeoConnect, async, db) {
    app.get('/', function(req, res, next) {
      return res.render('index', {
        title: 'Hello World!'
      });
    });
    app.get('/vimeo', function(req, res) {
      return vimeoConnect.requestToken(function(response) {
        req.session.token = response.token;
        req.session.token_secret = response.oauth_token_secret;
        return res.redirect(response.redirect);
      });
    });
    app.get('/auth', function(req, res) {
      var params;
      params = {
        token: req.query.oauth_token,
        verifier: req.query.oauth_verifier
      };
      params.token_secret = req.session.token_secret;
      return vimeoConnect.getAccToken(params, function(response) {
        req.session.token = {
          token: response.oauth_token,
          token_secret: response.oauth_token_secret
        };
        req.session.token_secret = response.oauth_token_secret;
        params = req.session;
        return vimeoConnect.getUserInfo(req.session.token, function(response) {
          var id;
          req.session.user = response.person;
          id = {
            "vimeo.id": response.person.id
          };
          return db.users.findOne(id, function(err, docs) {
            if (docs === null) {
              res.redirect('/sign-up');
              return console.log("new user");
            } else {
              res.redirect('/' + docs.user_name);
              return console.log("exising user");
            }
          });
        });
      });
    });
    app.get('/sign-up', function(req, res) {
      return res.render('signup', {
        user: req.session.user
      });
    });
    app.post('/check-username', function(req, res) {
      var username;
      username = req.body.user_name;
      return db.users.findOne({
        user_name: username
      }, function(err, response) {
        if (response === null) {
          return res.send("free");
        } else {
          return res.send("taken");
        }
      });
    });
    app.post('/new-user', function(req, res) {
      var user;
      user = {
        vimeo: req.session.user
      };
      user.user_name = req.body.user_name;
      user.token = req.session.token;
      req.session.user_name = req.body.user_name;
      return db.users.insert(user, function(err) {
        if (err) {
          throw err;
        }
        return res.send("user sent ok");
      });
    });
    app.post('/color-choice', function(req, res) {
      var color, id;
      color = req.body.color;
      console.log(color);
      id = {
        "vimeo.id": req.session.user.id
      };
      return db.users.update(id, {
        $set: {
          color: color
        }
      }, function(err) {
        var username;
        if (err) {
          throw err;
        }
        console.log("added color");
        username = req.session.user.user_name;
        return res.send("ok");
      });
    });
    app.post('/video-info', function(req, res) {
      var user, videoID;
      videoID = req.body.video_id;
      user = req.body.user;
      return db.users.findOne({
        user_name: user
      }, function(err, response) {
        var token;
        token = response.token;
        return vimeoConnect.getVideoInfo(token, videoID, function(response) {
          console.log(response.thumbnails);
          return res.send(response);
        });
      });
    });
    app.get('/sync', function(req, res) {
      var getVideoInfo, render, token, vidArr;
      console.log(req.session);
      render = function(videos, name) {
        var id;
        console.log("redirecting");
        id = {
          "vimeo.id": req.session.user.id
        };
        db.users.update(id, {
          $set: {
            videos: videos
          }
        }, true);
        return res.redirect('/' + name);
      };
      token = {
        token: 'f4eb56c51595c348f178f7c30282047f',
        token_secret: '79029bf362b130d6ba9e87cc3dad44da0d610c1c',
        consumer_key: 'b62d75bf5a4e0b0e5ae27acc9cae476e7000d0c5',
        consumer_secret: '9e14fd99e7852a313685ed9a057b0c4d2a2bf4f5'
      };
      vidArr = [];
      getVideoInfo = function(video, callback) {
        return vimeoConnect.getVideoInfo(token, video.id, function(response) {
          delete response.owner;
          vidArr.push(response);
          return callback();
        });
      };
      return vimeoConnect.getAllVideos(token, function(response) {
        return async.forEach(response.videos.video, getVideoInfo, function(err) {
          return render(vidArr, req.session.user_name);
        });
      });
    });
    app.get('/:username', function(req, res) {
      var username;
      if (req.url === '/favicon.ico') {
        res.writeHead(200, {
          'Content-Type': 'image/x-icon'
        });
        res.end();
        return console.log('favicon requested');
      } else {
        username = req.params.username;
        return db.users.findOne({
          user_name: username
        }, {
          token: 0
        }, function(err, response) {
          console.log(response);
          if (response === null) {
            return res.render('404');
          } else {
            return res.render('user', {
              user: response
            });
          }
        });
      }
    });
    return app.get('/:username/:video', function(req, res) {
      var username, video, videoName;
      if (req.url === '/favicon.ico') {
        res.writeHead(200, {
          'Content-Type': 'image/x-icon'
        });
        res.end();
        return console.log('favicon requested');
      } else {
        username = req.params.username;
        video = req.params.video;
        videoName = video.replace(/_/g, "%20");
        videoName = decodeURIComponent(videoName);
        console.log(videoName);
        return db.users.findOne({
          user_name: username
        }, {
          token: 0
        }, function(err, response) {
          var c, findVideo, found, render;
          if (response === null) {
            console.log("user not found");
            return res.render('404');
          } else {
            render = function(found) {
              return res.render('video', {
                user: response,
                video: found
              });
            };
            found = null;
            videoName = videoName.toLowerCase();
            c = 0;
            findVideo = function(video, callback) {
              var searchTerm;
              searchTerm = video.title;
              searchTerm = searchTerm.toLowerCase();
              if (searchTerm === videoName) {
                found = video;
                callback("err");
              }
              callback();
              c++;
              return console.log(c);
            };
            return async.forEach(response.videos, findVideo, function(err) {
              if (!err) {
                return res.render('404');
              } else {
                return render(found);
              }
            });
          }
        });
      }
    });
  };

}).call(this);
